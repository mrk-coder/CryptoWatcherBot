# services/notifications.py

import asyncio
from aiogram import Bot
from database import get_users_with_settings, set_tracking, get_tracking
from services.crypto_api import get_crypto_price
from utils.logger import get_logger

logger = get_logger(__name__)

async def check_price_changes(bot: Bot):
    """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω"""
    while True:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
            users_data = get_users_with_settings()
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –¥–ª—è {len(users_data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
            user_tracking = {}
            for row in users_data:
                user_id, username, interval, threshold, format_type, symbol, last_price = row
                if symbol:  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
                    if user_id not in user_tracking:
                        user_tracking[user_id] = {
                            'username': username,
                            'interval': interval,
                            'threshold': float(threshold),  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —ç—Ç–æ float
                            'format': format_type,
                            'symbols': []
                        }
                    user_tracking[user_id]['symbols'].append((symbol, last_price))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            for user_id, user_data in user_tracking.items():
                try:
                    for symbol, last_price_db in user_data['symbols']:
                        current_price = await get_crypto_price(symbol)
                        if current_price:
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (—Ç–æ–ª—å–∫–æ last_price)
                            set_tracking(user_id, symbol, current_price)
                            
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
                            if last_price_db is not None and last_price_db != '':
                                last_price = float(last_price_db)
                                if last_price != 0:
                                    change_percent = abs((current_price - last_price) / last_price) * 100
                                    logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ {symbol} –¥–ª—è {user_id}: {last_price} -> {current_price} ({change_percent:.2f}%) –ü–æ—Ä–æ–≥: {user_data['threshold']}%")
                                    
                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä–æ–≥
                                    if change_percent >= user_data['threshold']:
                                        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
                                        message = format_notification(
                                            symbol, last_price, current_price, 
                                            change_percent, user_data['format']
                                        )
                                        
                                        try:
                                            await bot.send_message(
                                                chat_id=user_id,
                                                text=message,
                                                parse_mode="HTML"
                                            )
                                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –û–¢–ü–†–ê–í–õ–ï–ù–û –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_data['username']} ({user_id}) –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ {symbol}")
                                        except Exception as e:
                                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                                    else:
                                        logger.info(f"‚ÑπÔ∏è –ò–∑–º–µ–Ω–µ–Ω–∏–µ {symbol} –¥–ª—è {user_id}: {change_percent:.2f}% (–º–µ–Ω—å—à–µ –ø–æ—Ä–æ–≥–∞ {user_data['threshold']}%)")
                                else:
                                    logger.info(f"‚ÑπÔ∏è –ù—É–ª–µ–≤–∞—è —Ü–µ–Ω–∞ –¥–ª—è {symbol} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
                            else:
                                logger.info(f"‚ÑπÔ∏è –ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ü–µ–Ω—ã –¥–ª—è {symbol} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (last_price_db: {last_price_db})")
                        else:
                            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–ª—è {symbol}")
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            
            # –ñ–¥–µ–º 1 –º–∏–Ω—É—Ç—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π (–º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª)
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ 3 –º–∏–Ω—É—Ç—ã –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...")
            await asyncio.sleep(180)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω: {e}")
            await asyncio.sleep(180)

def format_notification(symbol, old_price, new_price, change_percent, format_type):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
    change_symbol = "üìà" if new_price > old_price else "üìâ"
    
    if format_type == 'compact':
        # –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return (
            f"{change_symbol} <b>{symbol}</b> ${new_price:.2f} "
            f"({change_symbol} {change_percent:.2f}%)"
        )
    elif format_type == 'detailed':
        # –ü–æ–¥—Ä–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        return (
            f"{change_symbol} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {symbol}</b>\n\n"
            f"üí∞ –ü—Ä–µ–¥—ã–¥—É—â–∞—è —Ü–µ–Ω–∞: <code>${old_price:.2f}</code>\n"
            f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>${new_price:.2f}</code>\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{change_symbol} {change_percent:.2f}%</b>\n"
            f"‚è∞ {get_time_string()}"
        )
    else:
        # –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        return (
            f"{change_symbol} <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {symbol}</b>\n\n"
            f"üí∞ –°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: <code>${old_price:.2f}</code>\n"
            f"üíµ –ù–æ–≤–∞—è —Ü–µ–Ω–∞: <code>${new_price:.2f}</code>\n"
            f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{change_symbol} {change_percent:.2f}%</b>"
        )

def get_time_string():
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏"""
    from datetime import datetime
    return datetime.now().strftime("%H:%M:%S")
