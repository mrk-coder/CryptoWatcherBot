# handlers/start.py

import os
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.filters import Command, CommandStart 
from keyboards.main import (
    welcome_keyboard, currency_keyboard, 
    subscription_success_keyboard, tracking_menu_keyboard,
    settings_keyboard, interval_settings_keyboard,
    threshold_settings_keyboard, format_settings_keyboard,
    profile_keyboard, my_tracking_keyboard, 
    subscription_periods_keyboard 
)
from database import (
    add_user, is_subscribed, set_subscription, 
    add_invoice, get_active_invoice, get_user_settings,
    update_user_setting, get_tracking, get_subscription_end_date 
)    
from services.crypto_bot import create_invoice, check_invoice_status, cancel_invoice
from utils.logger import get_logger

logger = get_logger(__name__)
router = Router()

# –ü—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
WELCOME_IMAGE_PATH = "assets/welcome.jpg"  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–∞–ø–∫–∞ assets —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

@router.message(CommandStart())
async def start_handler(message: Message):
    try:
        user_id = message.from_user.id
        username = message.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        # –¢–µ–ø–µ—Ä—å add_user –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        add_user(user_id, username)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
        has_subscription = is_subscribed(user_id)
        
        welcome_text = (
            "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Tracker Bot!</b>\n\n"
            "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
            f"{'‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!' if has_subscription else 'üîî –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É'}"
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if os.path.exists(WELCOME_IMAGE_PATH):
            photo = FSInputFile(WELCOME_IMAGE_PATH)
            await message.answer_photo(
                photo=photo,
                caption=welcome_text,
                parse_mode="HTML",
                reply_markup=welcome_keyboard(has_subscription)
            )
        else:
            # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Å—ã–ª–∫—É
            await message.answer_photo(
                photo="https://i.imgur.com/5Xc5HjL.jpg",
                caption=welcome_text,
                parse_mode="HTML",
                reply_markup=welcome_keyboard(has_subscription)
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} ({user_id}) –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@router.callback_query(F.data == "profile")
async def profile_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    has_subscription = is_subscribed(user_id)
    
    if has_subscription:
        end_date = get_subscription_end_date(user_id)
        if end_date:
            time_left = end_date - datetime.now()
            days = time_left.days
            hours, remainder = divmod(time_left.seconds, 3600)
            minutes, _ = divmod(remainder, 60)
            subscription_info = f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞\n‚è± –î–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {days}–¥ {hours}—á {minutes}–º"
        else:
            subscription_info = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞ (–±–µ—Å—Å—Ä–æ—á–Ω–∞—è)"
    else:
        subscription_info = "‚ùå –ù–µ –∞–∫—Ç–∏–≤–Ω–∞"
    
    text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        f"üîñ –ü–æ–¥–ø–∏—Å–∫–∞: <b>{subscription_info}</b>\n"
    )
    
    await callback.message.edit_caption(
        caption=text,
        parse_mode="HTML",
        reply_markup=profile_keyboard(has_subscription)
    )

@router.callback_query(F.data == "my_tracking")
async def my_tracking_handler(callback: CallbackQuery):
    user_id = callback.from_user.id
    tracking_data = get_tracking(user_id)
    
    if not tracking_data:
        text = (
            "üìä <b>–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è</b>\n\n"
            "‚ùå –í—ã –ø–æ–∫–∞ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç–µ –Ω–∏ –æ–¥–Ω—É –≤–∞–ª—é—Ç—É.\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ."
        )
    else:
        text = "üìä <b>–ú–æ–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>\n\n"
        for symbol, initial_price, last_price in tracking_data:
            change_symbol = "üìà" if last_price > initial_price else "üìâ" if last_price < initial_price else "‚û°Ô∏è"
            change_percent = 0.0
            if initial_price and initial_price != 0:
                change_percent = ((last_price - initial_price) / initial_price) * 100
            
            text += (
                f"<b>{symbol}</b>\n"
                f"üèÅ –ù–∞—á–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: <code>${initial_price:.2f}</code>\n"
                f"üíµ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <code>${last_price:.2f}</code>\n"
                f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: <b>{change_symbol} {change_percent:.2f}%</b>\n\n"
            )
    
    await callback.message.edit_caption(
        caption=text,
        parse_mode="HTML",
        reply_markup=my_tracking_keyboard()
    )
    
@router.callback_query(F.data == "how_it_works")
async def how_it_works_handler(callback: CallbackQuery):
    text = (
        "‚ùì <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç Crypto Tracker:</b>\n\n"
        "1Ô∏è‚É£ <b>–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É</b> - –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
        "2Ô∏è‚É£ <b>–ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ</b> - –±–æ—Ç –Ω–∞—á–Ω–µ—Ç —Å–ª–µ–¥–∏—Ç—å –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º —Ü–µ–Ω—ã\n"
        "3Ô∏è‚É£ <b>–ü–æ–ª—É—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</b> - –±–æ—Ç —É–≤–µ–¥–æ–º–∏—Ç –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö\n"
        "4Ô∏è‚É£ <b>–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</b> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n"
        "‚Ä¢ –ò–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (1-15 –º–∏–Ω—É—Ç)\n"
        "‚Ä¢ –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (0.5%-5%)\n"
        "‚Ä¢ –§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π/–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π/–ø–æ–¥—Ä–æ–±–Ω—ã–π)\n\n"
        "üí∞ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b>\n"
        "‚Ä¢ –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
        "‚Ä¢ –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞–ª—é—Ç\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
    )
    
    has_subscription = is_subscribed(callback.from_user.id)
    await callback.message.edit_caption(
        caption=text,
        parse_mode="HTML",
        reply_markup=welcome_keyboard(has_subscription)
    )

@router.callback_query(F.data == "settings")
async def settings_handler(callback: CallbackQuery):
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
    
    user_settings = get_user_settings(callback.from_user.id)
    
    text = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>\n\n"
        f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: <b>{user_settings['interval']} –º–∏–Ω—É—Ç</b>\n"
        f"üìä –ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è: <b>{user_settings['threshold']}%</b>\n"
        f"üìù –§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: <b>{user_settings['format'].capitalize()}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:"
    )
    
    await callback.message.edit_caption(
        caption=text,
        parse_mode="HTML",
        reply_markup=settings_keyboard()
    )


@router.callback_query(F.data == "settings_interval")
async def settings_interval_handler(callback: CallbackQuery):
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
    
    text = "‚è± <b>–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ —á–∞—Å—Ç–æ –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω:"
    
    await callback.message.edit_caption(
        caption=text,
        parse_mode="HTML",
        reply_markup=interval_settings_keyboard()
    )

@router.callback_query(F.data.startswith("set_interval_"))
async def set_interval_handler(callback: CallbackQuery):
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
    
    try:
        interval = int(callback.data.split("_")[2])
        update_user_setting(callback.from_user.id, 'interval', interval)
        
        text = f"‚úÖ <b>–ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –±–æ—Ç –±—É–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ <b>{interval} –º–∏–Ω—É—Ç</b>."
        
        await callback.message.edit_caption(
            caption=text,
            parse_mode="HTML",
            reply_markup=settings_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –∏–Ω—Ç–µ—Ä–≤–∞–ª {interval} –º–∏–Ω—É—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_interval_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞", show_alert=True)

@router.callback_query(F.data == "settings_threshold")
async def settings_threshold_handler(callback: CallbackQuery):
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
    
    text = "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:</b>\n\n–ë–æ—Ç –±—É–¥–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –±–æ–ª—å—à–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è:"
    
    await callback.message.edit_caption(
        caption=text,
        parse_mode="HTML",
        reply_markup=threshold_settings_keyboard()
    )

@router.callback_query(F.data.startswith("set_threshold_"))
async def set_threshold_handler(callback: CallbackQuery):
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
    
    try:
        threshold_str = callback.data.split("_")[2]
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ—Å—è—Ç–∏—á–Ω—ã–µ —á–∏—Å–ª–∞
        if "." in threshold_str:
            threshold = float(threshold_str)
        else:
            threshold = int(threshold_str)
            
        update_user_setting(callback.from_user.id, 'threshold', threshold)
        
        text = f"‚úÖ <b>–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã –±–æ–ª–µ–µ <b>{threshold}%</b>."
        
        await callback.message.edit_caption(
            caption=text,
            parse_mode="HTML",
            reply_markup=settings_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª –ø–æ—Ä–æ–≥ {threshold}%")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_threshold_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ—Ä–æ–≥–∞", show_alert=True)

@router.callback_query(F.data == "settings_format")
async def settings_format_handler(callback: CallbackQuery):
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
    
    text = "üìù <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ, –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:"
    
    await callback.message.edit_caption(
        caption=text,
        parse_mode="HTML",
        reply_markup=format_settings_keyboard()
    )

@router.callback_query(F.data.startswith("set_format_"))
async def set_format_handler(callback: CallbackQuery):
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
    
    try:
        format_type = callback.data.split("_")[2]
        format_names = {
            'classic': '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π',
            'compact': '–ö–æ–º–ø–∞–∫—Ç–Ω—ã–π',
            'detailed': '–ü–æ–¥—Ä–æ–±–Ω—ã–π'
        }
        
        update_user_setting(callback.from_user.id, 'format', format_type)
        
        text = f"‚úÖ <b>–§–æ—Ä–º–∞—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n–¢–µ–ø–µ—Ä—å –≤–∞—à–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –≤ <b>{format_names.get(format_type, format_type)}</b> —Ñ–æ—Ä–º–∞—Ç–µ."
        
        await callback.message.edit_caption(
            caption=text,
            parse_mode="HTML",
            reply_markup=settings_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} —É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ñ–æ—Ä–º–∞—Ç {format_type}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_format_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞", show_alert=True)

@router.callback_query(F.data == "buy_subscription")
async def buy_subscription_handler(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        
        # –ê–¥–º–∏–Ω—É –Ω–µ –Ω—É–∂–Ω–æ –ø–æ–∫—É–ø–∞—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        if user_id == ADMIN_ID:
            from database import set_subscription
            set_subscription(user_id, 1)
            
            subscription_text = (
                "üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</b>\n\n"
                "‚úÖ –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /admin –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è."
            )
            
            try:
                await callback.message.edit_caption(
                    caption=subscription_text,
                    parse_mode="HTML",
                    reply_markup=subscription_success_keyboard()
                )
            except:
                await callback.message.edit_text(
                    text=subscription_text,
                    parse_mode="HTML",
                    reply_markup=subscription_success_keyboard()
                )
            logger.info(f"–ê–¥–º–∏–Ω {user_id} –ø–æ–ª—É—á–∏–ª –¥–æ—Å—Ç—É–ø")
            return
        
        # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –ë–î
        from database import get_subscription_prices
        prices = get_subscription_prices()
        
        period_names = {'day': '–î–µ–Ω—å', 'week': '–ù–µ–¥–µ–ª—è', 'month': '–ú–µ—Å—è—Ü'}
        prices_list = "\n".join([
            f"‚Ä¢ {period_names.get(p, p).capitalize()}: <b>{price} USDT</b>" 
            for p, price in prices.items()
        ])
        
        subscription_text = (
            "üí≥ <b>–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
            "‚ú® <b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ –ø–æ–¥–ø–∏—Å–∫—É:</b>\n"
            "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ 5 –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω\n"
            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            f"<b>–¶–µ–Ω—ã:</b>\n{prices_list}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏:"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞
        from keyboards.main import subscription_periods_keyboard
        try:
            await callback.message.edit_caption(
                caption=subscription_text,
                parse_mode="HTML",
                reply_markup=subscription_periods_keyboard(prices)
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption: {e}")
            try:
                await callback.message.edit_text(
                    text=subscription_text,
                    parse_mode="HTML",
                    reply_markup=subscription_periods_keyboard(prices)
                )
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞: {e2}")
                await callback.message.delete()
                await callback.message.answer(
                    text=subscription_text,
                    parse_mode="HTML",
                    reply_markup=subscription_periods_keyboard(prices)
                )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–µ—Ä–µ—à–µ–ª –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ buy_subscription_handler: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data.startswith("subscribe_"))
async def subscribe_period_handler(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        period = callback.data.split("_")[1] # subscribe_day, subscribe_week, subscribe_month
        
        # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –∏–∑ –ë–î
        from database import get_subscription_prices
        prices = get_subscription_prices()
        amount = prices.get(period, 1.0) # –î–µ—Ñ–æ–ª—Ç 1.0 USDT –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        period_days_map = {'day': 1, 'week': 7, 'month': 30}
        period_days = period_days_map.get(period, 30)
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot
        invoice = await create_invoice(
            amount=amount,
            currency="USDT",
            description=f"–ü–æ–¥–ø–∏—Å–∫–∞ Crypto Tracker –Ω–∞ {period_days} –¥–Ω–µ–π"
        )
        
        if invoice:
            invoice_url = invoice.get("pay_url", "").strip()
            invoice_id = invoice.get("invoice_id")
            hash = invoice.get("hash")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–∏–æ–¥–µ
            add_invoice(user_id, invoice_id, hash, amount, "USDT")
            
            period_names = {'day': '–¥–µ–Ω—å', 'week': '–Ω–µ–¥–µ–ª—é', 'month': '–º–µ—Å—è—Ü'}
            period_name = period_names.get(period, period)
            
            payment_text = (
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period_name}</b>\n\n"
                f"üí∞ –°—É–º–º–∞: <b>{amount} USDT</b>\n"
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{invoice_id}</code>\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
            )
            
            from keyboards.main import invoice_keyboard
            try:
                await callback.message.edit_caption(
                    caption=payment_text,
                    parse_mode="HTML",
                    reply_markup=invoice_keyboard(invoice_url)
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption: {e}")
                try:
                    await callback.message.edit_text(
                        text=payment_text,
                        parse_mode="HTML",
                        reply_markup=invoice_keyboard(invoice_url)
                    )
                except Exception as e2:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: {e2}")
                    await callback.message.delete()
                    await callback.message.answer(
                        text=payment_text,
                        parse_mode="HTML",
                        reply_markup=invoice_keyboard(invoice_url)
                    )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å {invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –ø–µ—Ä–∏–æ–¥ {period} ({amount} USDT)")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ subscribe_period_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Tracker Bot!</b>\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        f"{'‚úÖ –£ –≤–∞—Å –∞–∫—Ç–∏–≤–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞!' if is_subscribed(callback.from_user.id) else 'üîî –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É'}"
    )
    
    try:
        await callback.message.edit_caption(
            caption=welcome_text,
            parse_mode="HTML",
            reply_markup=welcome_keyboard(is_subscribed(callback.from_user.id))
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption: {e}")
        try:
            await callback.message.edit_text(
                text=welcome_text,
                parse_mode="HTML",
                reply_markup=welcome_keyboard(is_subscribed(callback.from_user.id))
            )
        except Exception as e2:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞: {e2}")
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.delete()
            await callback.message.answer_photo(
                photo="https://i.imgur.com/5Xc5HjL.jpg",
                caption=welcome_text,
                parse_mode="HTML",
                reply_markup=welcome_keyboard(is_subscribed(callback.from_user.id))
            )


@router.callback_query(F.data == "pay_via_cryptobot")
async def pay_via_cryptobot_handler(callback: CallbackQuery):
    try:
        from handlers.admin import SUBSCRIPTION_PRICE
        user_id = callback.from_user.id
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot
        invoice = await create_invoice(
            amount=SUBSCRIPTION_PRICE,
            currency="USDT",
            description="–ü–æ–¥–ø–∏—Å–∫–∞ Crypto Tracker Bot"
        )
        
        if invoice:
            invoice_url = invoice.get("pay_url", "").strip()
            invoice_id = invoice.get("invoice_id")
            hash = invoice.get("hash")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–≤–æ–π—Å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            add_invoice(user_id, invoice_id, hash, SUBSCRIPTION_PRICE, "USDT")
            
            payment_text = (
                f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
                f"üí∞ –°—É–º–º–∞: <b>{SUBSCRIPTION_PRICE} USDT</b>\n"
                f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: <code>{invoice_id}</code>\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
            )
            
            from keyboards.main import invoice_keyboard
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_caption, —Ç–∞–∫ –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ
                await callback.message.edit_caption(
                    caption=payment_text,
                    parse_mode="HTML",
                    reply_markup=invoice_keyboard(invoice_url)
                )
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption: {e}")
                try:
                    # –ï—Å–ª–∏ edit_caption –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º edit_text
                    await callback.message.edit_text(
                        text=payment_text,
                        parse_mode="HTML",
                        reply_markup=invoice_keyboard(invoice_url)
                    )
                except Exception as e2:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç: {e2}")
                    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —É–¥–∞–ª—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.delete()
                    await callback.message.answer(
                        text=payment_text,
                        parse_mode="HTML",
                        reply_markup=invoice_keyboard(invoice_url)
                    )
            
            logger.info(f"–°–æ–∑–¥–∞–Ω –∏–Ω–≤–æ–π—Å {invoice_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ pay_via_cryptobot_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@router.callback_query(F.data == "choose_currency")
async def choose_currency_handler(callback: CallbackQuery):
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
        
    text = (
        "üìä <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∏–∂–µ:"
    )
    
    await callback.message.edit_caption(
        caption=text,
        parse_mode="HTML",
        reply_markup=currency_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–µ—Ä–µ—à–µ–ª –∫ –≤—ã–±–æ—Ä—É –≤–∞–ª—é—Ç—ã")

@router.callback_query(F.data == "back_to_main")
async def back_to_main_handler(callback: CallbackQuery):
    welcome_text = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Crypto Tracker Bot!</b>\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.\n\n"
        "üîî <i>–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É</i>"
    )
    
    await callback.message.edit_caption(
        caption=welcome_text,
        parse_mode="HTML",
        reply_markup=welcome_keyboard()
    )



@router.callback_query(F.data == "check_payment")
async def check_payment_handler(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        invoice_data = get_active_invoice(user_id)
        
        if not invoice_data:
            check_text = (
                "‚ùå <b>–ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω</b>\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
            )
            
            from keyboards.main import welcome_keyboard
            has_subscription = is_subscribed(user_id)
            try:
                await callback.message.edit_text(
                    text=check_text,
                    parse_mode="HTML",
                    reply_markup=welcome_keyboard(has_subscription)
                )
            except:
                await callback.message.edit_caption(
                    caption=check_text,
                    parse_mode="HTML",
                    reply_markup=welcome_keyboard(has_subscription)
                )
            return
        
        invoice_id, hash, amount, currency = invoice_data
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ —á–µ—Ä–µ–∑ CryptoBot API
        invoice_status = await check_invoice_status(invoice_id)
        
        if not invoice_status:
            check_text = (
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            from keyboards.main import payment_keyboard
            try:
                await callback.message.edit_text(
                    text=check_text,
                    parse_mode="HTML",
                    reply_markup=payment_keyboard()
                )
            except:
                await callback.message.edit_caption(
                    caption=check_text,
                    parse_mode="HTML",
                    reply_markup=payment_keyboard()
                )
            return
        
        status = invoice_status.get("status")
        logger.info(f"–°—Ç–∞—Ç—É—Å –∏–Ω–≤–æ–π—Å–∞ {invoice_id}: {status}")
        
        if status in ['paid', 'confirmed']:
            # –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ - –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—É–º–º–µ (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Å–ø–æ—Å–æ–±)
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –ø–µ—Ä–∏–æ–¥ –≤ invoices —Ç–∞–±–ª–∏—Ü–µ
            from database import get_subscription_prices
            prices = get_subscription_prices()
            
            # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–∏–æ–¥ –ø–æ —Å—É–º–º–µ
            period_days_map = {'day': 1, 'week': 7, 'month': 30}
            period = 'month' # –¥–µ—Ñ–æ–ª—Ç
            for p, price in prices.items():
                if abs(float(amount) - price) < 0.001: # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ float
                    period = p
                    break
                    
            period_days = period_days_map.get(period, 30)
            
            set_subscription(user_id, 1, period_days)
            
            period_names = {'day': '–¥–µ–Ω—å', 'week': '–Ω–µ–¥–µ–ª—é', 'month': '–º–µ—Å—è—Ü'}
            period_name = period_names.get(period, period)
            
            success_text = (
                f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_name} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n"
                "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {period_days} –¥–Ω–µ–π."
            )
            
            from keyboards.main import subscription_success_keyboard
            try:
                await callback.message.edit_text(
                    text=success_text,
                    parse_mode="HTML",
                    reply_markup=subscription_success_keyboard()
                )
            except:
                await callback.message.edit_caption(
                    caption=success_text,
                    parse_mode="HTML",
                    reply_markup=subscription_success_keyboard()
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await callback.message.answer(
                "üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞—á–Ω–∏—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.",
                reply_markup=subscription_success_keyboard()
            )
            
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {period_name} ({period_days} –¥–Ω–µ–π) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            logger.info(f"–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
        elif status == 'active':
            # –ü–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω
            check_text = (
                "‚è≥ <b>–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã</b>\n\n"
                "–í–∞—à –ø–ª–∞—Ç–µ–∂ –µ—â–µ –Ω–µ –æ–ø–ª–∞—á–µ–Ω.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∏—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–Ω–æ–≤–∞."
            )
            
            from keyboards.main import invoice_keyboard
            pay_url = invoice_status.get("pay_url", "")
            try:
                await callback.message.edit_text(
                    text=check_text,
                    parse_mode="HTML",
                    reply_markup=invoice_keyboard(pay_url)
                )
            except:
                await callback.message.edit_caption(
                    caption=check_text,
                    parse_mode="HTML",
                    reply_markup=invoice_keyboard(pay_url)
                )
                
        elif status in ['cancelled', 'expired']:
            # –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫
            check_text = (
                f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ {status}</b>\n\n"
                f"–í–∞—à –ø–ª–∞—Ç–µ–∂ –±—ã–ª {status}.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂."
            )
            
            from keyboards.main import welcome_keyboard
            has_subscription = is_subscribed(user_id)
            try:
                await callback.message.edit_text(
                    text=check_text,
                    parse_mode="HTML",
                    reply_markup=welcome_keyboard(has_subscription)
                )
            except:
                await callback.message.edit_caption(
                    caption=check_text,
                    parse_mode="HTML",
                    reply_markup=welcome_keyboard(has_subscription)
                )
        else:
            # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            check_text = (
                "‚ùì <b>–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
                f"–°—Ç–∞—Ç—É—Å: {status}\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            
            from keyboards.main import payment_keyboard
            try:
                await callback.message.edit_text(
                    text=check_text,
                    parse_mode="HTML",
                    reply_markup=payment_keyboard()
                )
            except:
                await callback.message.edit_caption(
                    caption=check_text,
                    parse_mode="HTML",
                    reply_markup=payment_keyboard()
                )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_payment_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã", show_alert=True)

@router.callback_query(F.data == "cancel_payment")
async def cancel_payment_handler(callback: CallbackQuery):
    try:
        user_id = callback.from_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É –æ–ø–ª–∞—Ç—ã")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        invoice_data = get_active_invoice(user_id)
        
        if not invoice_data:
            await callback.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ—Ç–º–µ–Ω—ã", show_alert=True)
            return
        
        invoice_id, hash, amount, currency = invoice_data
        
        # –û—Ç–º–µ–Ω—è–µ–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ CryptoBot API
        result = await cancel_invoice(invoice_id)
        
        if result:
            cancel_text = (
                "‚úÖ <b>–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω</b>\n\n"
                "–í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω.\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
            )
            
            from keyboards.main import welcome_keyboard
            try:
                await callback.message.edit_text(
                    text=cancel_text,
                    parse_mode="HTML",
                    reply_markup=welcome_keyboard()
                )
            except:
                await callback.message.edit_caption(
                    caption=cancel_text,
                    parse_mode="HTML",
                    reply_markup=welcome_keyboard()
                )
            
            logger.info(f"–ü–ª–∞—Ç–µ–∂ {invoice_id} –æ—Ç–º–µ–Ω–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ cancel_payment_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


# @router.message(Command("test_notify"))
# async def test_notify_handler(message: Message):
    # """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    # from services.notifications import format_notification
    
    # # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    # test_message = format_notification("BTC", 100000, 105000, 5.0, "classic")
    
    # try:
        # await message.bot.send_message(
            # chat_id=message.from_user.id,
            # text=test_message,
            # parse_mode="HTML"
        # )
        # await message.answer("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
        # logger.info(f"–¢–µ—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
    # except Exception as e:
        # await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        # logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}: {e}")
