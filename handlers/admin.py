# handlers/admin.py

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from config import ADMIN_ID
from database import ( 
    set_subscription, get_all_users, get_user_stats,
    update_invoice_status, get_invoice_by_id,
    get_subscription_prices, set_subscription_price
)

from keyboards.admin import (
    admin_main_keyboard, admin_users_keyboard,
    admin_back_keyboard, admin_broadcast_start_keyboard,
    admin_broadcast_image_keyboard, admin_subscription_periods_keyboard,
    admin_subscription_back_keyboard,
    admin_broadcast_keyboard 
)
from utils.logger import get_logger

logger = get_logger(__name__)
router = Router()

# –ú–∞—à–∏–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
class BroadcastStates(StatesGroup):
    waiting_for_text = State()
    waiting_for_image = State()
    preview = State()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ü–µ–Ω (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø–æ–∑–∂–µ)
SUBSCRIPTION_PRICES = {}


def load_subscription_prices():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ –ë–î –≤ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é"""
    global SUBSCRIPTION_PRICES
    try:
        SUBSCRIPTION_PRICES = get_subscription_prices()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω—ã —Ü–µ–Ω—ã –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É: {SUBSCRIPTION_PRICES}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        SUBSCRIPTION_PRICES = {}

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin - —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
@router.message(Command("admin"))
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏!")
        return
    
    # --- –í–ê–ñ–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –∑–¥–µ—Å—å, –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î ---
    load_subscription_prices()
    
    text = (
        "üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Crypto Tracker</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    await message.answer(text, parse_mode="HTML", reply_markup=admin_main_keyboard())
    logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–æ—à–µ–ª –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è")
    
@router.callback_query(F.data == "admin_main")
async def admin_main_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    text = (
        "üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Crypto Tracker</b>\n\n"
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_text –≤–º–µ—Å—Ç–æ edit_caption
    try:
        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_main_keyboard())
    except:
        await callback.message.edit_caption(caption=text, parse_mode="HTML", reply_markup=admin_main_keyboard())
        
@router.callback_query(F.data == "admin_users")
async def admin_users_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    text = (
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
    )
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_users_keyboard())

@router.callback_query(F.data == "admin_user_list")
async def admin_user_list_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    try:
        users = get_all_users()
        
        if not users:
            text = (
                "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
            )
        else:
            text = "üë• <b>–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
            for user_id, username, subscribed in users[:15]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 15
                sub_status = "‚úÖ" if subscribed else "‚ùå"
                username_display = f"@{username}" if username else f"ID: {user_id}"
                text += f"‚Ä¢ {sub_status} {username_display} (<code>{user_id}</code>)\n"
            
            if len(users) > 15:
                text += f"\n<i>–ü–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 15 –∏–∑ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>"
        
        await callback.message.edit_text(
            text, 
            parse_mode="HTML", 
            reply_markup=admin_users_keyboard()
        )
        logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_user_list_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞", show_alert=True)

@router.callback_query(F.data == "admin_subscription")
async def admin_subscription_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –ë–î –ø—Ä–∏ –∫–∞–∂–¥–æ–º –≤—Ö–æ–¥–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑–¥–µ–ª
    load_subscription_prices()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é SUBSCRIPTION_PRICES
    prices = SUBSCRIPTION_PRICES 
    
    period_names = {'day': '–î–µ–Ω—å', 'week': '–ù–µ–¥–µ–ª—è', 'month': '–ú–µ—Å—è—Ü'}
    prices_text = "\n".join([f"‚Ä¢ {period_names.get(p, p)}: <b>{price} USDT</b>" for p, price in prices.items()])
    
    text = (
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n{prices_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:"
    )
    
    # –ü–µ—Ä–µ–¥–∞–µ–º prices –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=admin_subscription_periods_keyboard(prices) # –ü–µ—Ä–µ–¥–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã
    )


@router.callback_query(F.data == "admin_change_price")
async def admin_change_price_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    text = (
        "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ USDT:\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/set_price 2.5</code>"
    )
    
    await callback.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=admin_back_keyboard()
    )

@router.message(Command("set_price"))
async def admin_set_subscription_price(message: Message): # <-- –ù–æ–≤–æ–µ –∏–º—è
    if message.from_user.id != ADMIN_ID:
        return

    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É
        parts = message.text.split()
        if len(parts) < 2:
             await message.answer("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_price [—Ü–µ–Ω–∞]")
             return
             
        new_price = float(parts[1]) # <-- parts[1] –≤–º–µ—Å—Ç–æ message.text.split()[1] –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if new_price > 0:
            set_subscription_price('month', new_price) # <-- –í—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ database
            await message.answer(
                f"‚úÖ –¶–µ–Ω–∞ –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_price} USDT</b>",
                parse_mode="HTML"
            )
            logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Ü–µ–Ω—É –º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {new_price} USDT")
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à —Ü–µ–Ω
            load_subscription_prices()
        else:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
    except ValueError: # –ë–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /set_price [—Ü–µ–Ω–∞]")
    except Exception as e: # –ù–∞ —Å–ª—É—á–∞–π –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ë–î
        logger.error(f"–û—à–∏–±–∫–∞ –≤ admin_set_subscription_price: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω—ã.")
        
@router.callback_query(F.data == "admin_give_sub")
async def admin_give_sub_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    text = (
        "‚ûï <b>–í—ã–¥–∞—á–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/give_sub [user_id]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/give_sub 123456789</code>"
    )
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_back_keyboard())

@router.message(Command("give_sub"))
async def give_subscription(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        user_id = int(message.text.split()[1])
        set_subscription(user_id, 1)
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_id}</code>",
            parse_mode="HTML"
        )
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–¥–∞–ª –ø–æ–¥–ø–∏—Å–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except (IndexError, ValueError):
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /give_sub [user_id]")

@router.callback_query(F.data == "admin_remove_sub")
async def admin_remove_sub_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    text = (
        "‚ûñ <b>–û—Ç–∑—ã–≤ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/remove_sub [user_id]</code>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>/remove_sub 123456789</code>"
    )
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_back_keyboard())

@router.message(Command("remove_sub"))
async def remove_subscription(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        user_id = int(message.text.split()[1])
        set_subscription(user_id, 0)
        await message.answer(
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–æ–∑–≤–∞–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_id}</code>",
            parse_mode="HTML"
        )
        logger.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –æ—Ç–æ–∑–≤–∞–ª –ø–æ–¥–ø–∏—Å–∫—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    except (IndexError, ValueError):
        await message.answer("‚ùå –û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /remove_sub [user_id]")

@router.callback_query(F.data == "admin_stats")
async def admin_stats_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    from database import get_user_stats
    stats = get_user_stats()
    
    text = (
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{stats['total']}</b>\n"
        f"‚úÖ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{stats['subscribed']}</b>\n"
        f"‚ùå –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{stats['unsubscribed']}</b>"
    )
    
    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=admin_back_keyboard())


@router.callback_query(F.data == "check_payment")
async def check_payment_handler(callback: CallbackQuery):
    try:
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã
        # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        
        from handlers.admin import SUBSCRIPTION_PRICE
        check_text = (
            "üîÑ <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã</b>\n\n"
            "‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –ø–ª–∞—Ç–µ–∂–∞...\n\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, –¥–æ—Å—Ç—É–ø –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –º–∏–Ω—É—Ç."
        )
        
        from keyboards.main import payment_keyboard
        await callback.message.edit_text(
            text=check_text,
            parse_mode="HTML",
            reply_markup=payment_keyboard()
        )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–ø–ª–∞—Ç—É")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ check_payment_handler: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã", show_alert=True)
        
@router.callback_query(F.data == "admin_broadcast")
async def admin_broadcast_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    text = (
        "üì¢ <b>–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞."
    )
    
    await callback.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=admin_broadcast_start_keyboard()
    )

@router.callback_query(F.data == "admin_broadcast_text")
async def admin_broadcast_text_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return
        
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", 
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_text)

@router.message(BroadcastStates.waiting_for_text)
async def process_broadcast_text(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
        
    await state.update_data(text=message.text)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    await message.answer(
        "–¢–µ–∫—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
        reply_markup=admin_broadcast_image_keyboard()
    )
    await state.set_state(BroadcastStates.waiting_for_image)

@router.callback_query(F.data == "admin_broadcast_attach_image")
async def admin_broadcast_attach_image_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    await callback.message.edit_text(
        "üñº <b>–ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:</b>", 
        parse_mode="HTML"
    )
    # –°–æ—Å—Ç–æ—è–Ω–∏–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤ waiting_for_image

@router.callback_query(F.data == "admin_broadcast_send_no_image")
async def admin_broadcast_send_no_image_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return
        
    await state.update_data(photo=None)
    user_data = await state.get_data()
    text = user_data['text']
    
    preview_text = f"üì¢ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{text}"
    if len(preview_text) > 1024:
        preview_text = preview_text[:1021] + "..."
        
    await callback.message.edit_text(
        preview_text,
        parse_mode="HTML",
        reply_markup=admin_broadcast_keyboard()
    )
    await state.set_state(BroadcastStates.preview)

@router.message(BroadcastStates.waiting_for_image, F.photo)
async def process_broadcast_image(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
        
    file_id = message.photo[-1].file_id
    await state.update_data(photo=file_id)
    user_data = await state.get_data()
    text = user_data['text']
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    try:
        await message.bot.send_photo(
            chat_id=message.chat.id,
            photo=file_id,
            caption=f"üì¢ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n\n{text}",
            parse_mode="HTML",
            reply_markup=admin_broadcast_keyboard()
        )
        await state.set_state(BroadcastStates.preview)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞: {e}")
        await state.clear()

@router.callback_query(BroadcastStates.preview, F.data == "admin_broadcast_confirm")
async def process_broadcast_confirm(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    text = user_data['text']
    photo = user_data.get('photo')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    bot = callback.bot
    success_count = 0
    error_count = 0
    
    progress_message = await callback.message.answer(
        "üöÄ <b>–ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ä–∞—Å—Å—ã–ª–∫–∏...</b>\n"
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
        parse_mode="HTML"
    )
    
    for i, (user_id, username, _) in enumerate(users):
        try:
            if photo:
                await bot.send_photo(chat_id=user_id, photo=photo, caption=text, parse_mode="HTML")
            else:
                await bot.send_message(chat_id=user_id, text=text, parse_mode="HTML")
            success_count += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} ({username}): {e}")
            error_count += 1
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

        if (i + 1) % 10 == 0 or i == len(users) - 1:
            try:  
                await progress_message.edit_text(
                    f"üöÄ <b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏...</b>\n"
                    f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i + 1}/{len(users)}\n"
                    f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
                    f"–û—à–∏–±–æ–∫: {error_count}",
                    parse_mode="HTML"
                )
            except:
                pass # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    
    await callback.message.answer(
        f"‚úÖ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n"
        f"–£—Å–ø–µ—à–Ω–æ: {success_count}\n"
        f"–û—à–∏–±–æ–∫: {error_count}",
        parse_mode="HTML",
        reply_markup=admin_main_keyboard()
    )
    logger.info(f"–ê–¥–º–∏–Ω {callback.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ä–∞—Å—Å—ã–ª–∫—É: —É—Å–ø–µ—à–Ω–æ {success_count}, –æ—à–∏–±–æ–∫ {error_count}")
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ü–µ–Ω–∞–º–∏ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
@router.callback_query(F.data == "admin_subscription")
async def admin_subscription_handler(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        return
        
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –∏–∑ –ë–î
    load_subscription_prices()
    prices = get_subscription_prices()
    
    period_names = {'day': '–î–µ–Ω—å', 'week': '–ù–µ–¥–µ–ª—è', 'month': '–ú–µ—Å—è—Ü'}
    prices_text = "\n".join([f"‚Ä¢ {period_names.get(p, p)}: <b>{price} USDT</b>" for p, price in prices.items()])
    
    text = (
        "üí∞ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
        f"–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:\n{prices_text}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:"
    )
    
    await callback.message.edit_text(
        text, 
        parse_mode="HTML", 
        reply_markup=admin_subscription_periods_keyboard(prices)
    )

@router.callback_query(F.data.startswith("admin_change_price_"))
async def admin_change_price_period_handler(callback: CallbackQuery, state: FSMContext):
    if callback.from_user.id != ADMIN_ID:
        return
        
    period = callback.data.split("_")[-1] # admin_change_price_day
    period_names = {'day': '–¥–Ω—è', 'week': '–Ω–µ–¥–µ–ª–∏', 'month': '–º–µ—Å—è—Ü–∞'}
    period_name = period_names.get(period, period)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
    prices = get_subscription_prices()
    current_price = prices.get(period, 1.0)
    
    text = (
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period_name}</b>\n\n"
        f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>{current_price} USDT</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ USDT (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –∏–ª–∏ 1.25):"
    )
    
    await state.update_data(changing_period=period)
    await callback.message.edit_text(
        text, 
        parse_mode="HTML"
    )
    # –ñ–¥–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Ü–µ–Ω–æ–π

@router.message(F.text.regexp(r'^\d+\.?\d*$'))
async def process_new_subscription_price(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
        
    try:
        new_price = float(message.text)
        if new_price < 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
            
        user_data = await state.get_data()
        period = user_data.get('changing_period')
        
        if not period:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–µ–Ω—é.")
            await state.clear()
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ –ë–î
        set_subscription_price(period, new_price)
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç–∏
        load_subscription_prices()
        
        period_names = {'day': '–¥–µ–Ω—å', 'week': '–Ω–µ–¥–µ–ª—é', 'month': '–º–µ—Å—è—Ü'}
        period_name = period_names.get(period, period)
        
        await message.answer(
            f"‚úÖ –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ {period_name} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{new_price} USDT</b>",
            parse_mode="HTML"
        )
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∫–∏
        await message.answer(
            "üëë <b>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å Crypto Tracker</b>\n\n"
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
            parse_mode="HTML",
            reply_markup=admin_main_keyboard()
        )
        await state.clear()
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.5 –∏–ª–∏ 1.25):")
