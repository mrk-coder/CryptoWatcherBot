# handlers/tracking.py

from aiogram import Router, F
from aiogram.types import CallbackQuery
from database import set_tracking, get_user_settings, is_subscribed
from services.crypto_api import get_crypto_price
from keyboards.main import tracking_menu_keyboard
from utils.logger import get_logger

logger = get_logger(__name__)
router = Router()  # –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ router

@router.callback_query(F.data.startswith("track_"))
async def track_currency_handler(callback: CallbackQuery):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    if not is_subscribed(callback.from_user.id):
        await callback.answer("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!", show_alert=True)
        return
        
    symbol = callback.data.split("_")[1]
    price = await get_crypto_price(symbol)
    
    if price:
        set_tracking(callback.from_user.id, symbol, price)
        
        currency_names = {
            "BTC": "Bitcoin",
            "ETH": "Ethereum", 
            "BNB": "Binance Coin",
            "SOL": "Solana",
            "XRP": "Ripple"
        }
        
        user_settings = get_user_settings(callback.from_user.id)
        
        text = (
            f"‚úÖ <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!</b>\n\n"
            f"üìä –í–∞–ª—é—Ç–∞: <b>{currency_names.get(symbol, symbol)} ({symbol})</b>\n"
            f"üí∞ –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: <b>${price:.2f}</b>\n"
            f"‚è± –ò–Ω—Ç–µ—Ä–≤–∞–ª: <b>{user_settings['interval']} –º–∏–Ω—É—Ç</b>\n"
            f"üìä –ü–æ—Ä–æ–≥: <b>{user_settings['threshold']}%</b>\n\n"
            f"üîî –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ <b>{user_settings['format']}</b> —Ñ–æ—Ä–º–∞—Ç–µ."
        )
        
        try:
            await callback.message.edit_caption(
                caption=text,
                parse_mode="HTML",
                reply_markup=tracking_menu_keyboard()
            )
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å caption: {e}")
            try:
                await callback.message.edit_text(
                    text=text,
                    parse_mode="HTML",
                    reply_markup=tracking_menu_keyboard()
                )
            except Exception as e2:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                await callback.answer("‚úÖ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ!", show_alert=True)
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞—á–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å {symbol} –ø–æ —Ü–µ–Ω–µ ${price:.2f}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã", show_alert=True)
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è {symbol} —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
